# This is a commint CI
name: CI (PR)

on:
  pull_request:
    branches:
      - master
  workflow_dispatch: {}

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  prepare: 
    name: Check Out
    runs-on: ubuntu-latest
    steps:
      - name: Check Out
        uses: actions/checkout@v4

      - name: Detect Package Manager
        id: DPM
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_ENV
            echo "command=install" >> $GITHUB_ENV
            echo "runner=yarn" >> $GITHUB_ENV
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_ENV
            echo "command=ci" >> $GITHUB_ENV
            echo "runner=npx --no-install" >> $GITHUB_ENV
          else
            echo "Unable to determine package manager"
            exit 1
          fi

      
  cache:
    name: Restore Cache
    runs-on: ubuntu-latest
    steps:
      - uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx', 'app/components/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |  
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-  


  build-test:
    needs: prepare
    name: Build Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: ${{ steps.DPM.outputs.manager }}
          
      - name: Install Dependencies
        run: ${{ steps.DPM.outputs.manager }} ${{ steps.DPM.outputs.command }}

      - name: Build
        run: npm run build
